---
title: "Project1"
format: html
editor: visual
---

### Data

The files to be read contain information from the *Census Bureau* in csv format. The aim is to create generic functions that can process and plot files in specific tabular format. Firstly, data processing steps will be applied to [File 1](https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv).

### Data Processing

#### First Steps

The first step requires retuning specific columns from full set. This is made easier using the `tidyverse` packages. Loading the `tidyverse` packages using `require()` .

```{r}
require(tidyverse)
```

Reading in [File 1](https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv) using `read_csv().`

```{r}
file_1 <- read_csv("https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv")

head(file_1) #Preview
```

Selecting the required columns with `select()` from `dplyr`. Selecting the columns `Area_name`, `STCOU` and columns ending with "D" (using `ends_with()`). Renaming `Area_name` to `area_name` with `mutate()` .

```{r}
file_1_selected <- file_1 |>
  mutate(area_name = Area_name) |>
  select(area_name,STCOU,ends_with("D"))

file_1_selected 
```

Convert the data into long format where each row has only one enrollment value for that *Area_name*.

```{r}
file_1_long <- file_1_selected %>%
  pivot_longer(
    cols = ends_with("D"),
    names_to = "Enrollment", 
    values_to = "Value"
  )

file_1_long
```

Based on the schema, the enrollment column is formatted to extract a substring consisting of the 8th and 9th characters, representing the year. This substring extraction is vectorized using `substr()` within `mutate()`. Next, depending on whether the extracted year value is greater than 24, "20" or "19" is prefixed to the string using `if_else()`. Finally, the result is coerced to a numeric format using `as.numeric()`.

```{r}
file_1_long <- file_1_long |>
  mutate(year = as.numeric(substr(x =as.character(Enrollment),start = 8,stop = 9 )))|>
  mutate(year = if_else(condition = year>24,true = paste("19",as.character(year),sep = "") ,false = paste("20",as.character(year),sep = ""))) |>
  mutate(year = as.numeric(year))
file_1_long
```

```{r}
f1_county <- file_1_long[grep(pattern = ", \\w\\w", file_1_long$area_name,invert = FALSE),]
f1_county
```

```{r}
f1_not_county <- file_1_long[grep(pattern = ", \\w\\w", file_1_long$area_name,invert = TRUE),]
f1_not_county
```

```{r}
class(f1_county) <- c("county", class(f1_county))
class(f1_not_county) <- c("state", class(f1_not_county))
```

```{r}
f1_county <- f1_county |>
  mutate(state = substr(area_name, start = nchar(area_name) - 1, stop = nchar(area_name)))

f1_county
```

```{r}
# Defining the division function
division <- function(state) {
  case_when(
    state %in% c("CONNECTICUT", "MAINE", "MASSACHUSETTS", "NEW HAMPSHIRE", "RHODE ISLAND", "VERMONT") ~ "Division 1",
    state %in% c("DELAWARE", "MARYLAND", "NEW JERSEY", "NEW YORK", "PENNSYLVANIA") ~ "Division 2",
    state %in% c("ILLINOIS", "INDIANA", "MICHIGAN", "OHIO", "WISCONSIN") ~ "Division 3",
    state %in% c("IOWA", "KANSAS", "MINNESOTA", "MISSOURI", "NEBRASKA", "NORTH DAKOTA", "SOUTH DAKOTA") ~ "Division 4",
    state %in% c("FLORIDA", "GEORGIA", "NORTH CAROLINA", "SOUTH CAROLINA", "VIRGINIA", "WEST VIRGINIA") ~ "Division 5",
    state %in% c("ALABAMA", "KENTUCKY", "MISSISSIPPI", "TENNESSEE") ~ "Division 6",
    state %in% c("ARKANSAS", "LOUISIANA", "OKLAHOMA", "TEXAS") ~ "Division 7",
    state %in% c("ARIZONA", "COLORADO", "IDAHO", "MONTANA", "NEVADA", "NEW MEXICO", "UTAH", "WYOMING") ~ "Division 8",
    state %in% c("ALASKA", "CALIFORNIA", "HAWAII", "OREGON", "WASHINGTON") ~ "Division 9",
    TRUE ~ "ERROR"  # Default case if area_name doesn't match any category
  )
}

# Vectorize the function to apply to a column of states
f1_not_county <- f1_not_county |>
  mutate(division = sapply(area_name, division))
f1_not_county
```

Template Leftover\_\_\_\_\_\_\_\_\_\_\_\_\_\_

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).
