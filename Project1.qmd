---
title: "Project 1"
author: "Anna Giczewska, Smit Miyani"
format: html
editor: visual
---

### Data

The files to be read contain information from the *Census Bureau* in csv format. The aim is to create generic functions that can process and plot files in specific tabular format. Firstly, data processing steps will be applied to [File 1](https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv).

### Data Processing

#### Isolated Data Processing Steps

The first step requires retuning specific columns from full set. This is made easier using the `tidyverse` packages. Loading the `tidyverse` packages using `require()` .

```{r}
require(tidyverse)
```

Reading in [File 1](https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv) using `read_csv().`

```{r}
file_1 <- read_csv("https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv")
head(file_1) #Preview
```

Selecting the required columns with `select()` from `dplyr`. Selecting the columns `Area_name`, `STCOU` and columns ending with "D" (using `ends_with()`). Renaming `Area_name` to `area_name` with `mutate()` .

```{r}
file_1_selected <- file_1 |>
  mutate(area_name = Area_name) |>
  select(area_name,STCOU,ends_with("D"))

file_1_selected 
```

Convert the data into long format where each row has only one enrollment value for that *Area_name*.

```{r}
file_1_long <- file_1_selected %>%
  pivot_longer(
    cols = ends_with("D"),
    names_to = "Enrollment", 
    values_to = "Value"
  )

file_1_long
```

Based on the schema, the enrollment column is formatted to extract a substring consisting of the 8th and 9th characters, representing the year. This substring extraction is vectorized using `substr()` within `mutate()`. Next, depending on whether the extracted year value is greater than 24, "200" or "19" is prefixed to the string using `if_else()`. Finally, the result is coerced to a numeric format using `as.numeric()`.

```{r}
file_1_formatted <- file_1_long |>
  mutate(year = as.numeric(substr(x =as.character(Enrollment),start = 8,stop = 9 )))|>
  mutate(year = if_else(condition = year>24,
                        true = paste("19",as.character(year),sep = "") ,
                        false = paste("200",as.character(year),sep = ""))) |>
  mutate(year = as.numeric(year))
file_1_formatted
```

Selecting rows in `file_1_formatted` where the `area_name` column contains a pattern matching ", \\w\\w", and storing the result to `f1_county`.

```{r}
f1_county <- file_1_formatted[grep(pattern = ", \\w\\w", file_1_formatted$area_name,invert = FALSE),]
f1_county
```

Selecting rows in `file_1_formatted` where the `area_name` column does not contain a pattern matching ", \\w\\w", and storing the result to `f1_county`. This was performed by setting the `invert` argument to be `TRUE` .

```{r}
f1_not_county <- file_1_formatted[grep(pattern = ", \\w\\w", file_1_formatted$area_name,invert = TRUE),]
f1_not_county
```

Assigning the class `county` to `f1_county` and class `state` to `f1_not_county`. This will be used for making class specific functions later.

```{r}
class(f1_county) <- c("county", class(f1_county))
class(f1_not_county) <- c("state", class(f1_not_county))
```

Determining the state for the county data set by extracting the last to characters from the `area_name` observations using `substr()` . The character index (required for `start=` and `stop=` argument) in the character string is determined using `nchar()` .

```{r}
f1_county <- f1_county |>
  mutate(state = substr(area_name, start = nchar(area_name) - 1, stop = nchar(area_name)))

f1_county
```

Creating a function `division` that maps the state to the corresponding Division defined by the Census Bureau. The function is created based on multiple if/else if logical statements using `case_when()` . Then vectorizing the function by applying it within `sapply()` in the chain. This results in a new column, where the division is assisgned based on the state in the `area_name` column.

```{r}
# Defining the division function
division <- function(state) {
  case_when(
    state %in% c("CONNECTICUT", "MAINE", "MASSACHUSETTS", "NEW HAMPSHIRE", "RHODE ISLAND", "VERMONT") ~ "Division 1",
    state %in% c("DELAWARE", "MARYLAND", "NEW JERSEY", "NEW YORK", "PENNSYLVANIA") ~ "Division 2",
    state %in% c("ILLINOIS", "INDIANA", "MICHIGAN", "OHIO", "WISCONSIN") ~ "Division 3",
    state %in% c("IOWA", "KANSAS", "MINNESOTA", "MISSOURI", "NEBRASKA", "NORTH DAKOTA", "SOUTH DAKOTA") ~ "Division 4",
    state %in% c("FLORIDA", "GEORGIA", "NORTH CAROLINA", "SOUTH CAROLINA", "VIRGINIA", "WEST VIRGINIA") ~ "Division 5",
    state %in% c("ALABAMA", "KENTUCKY", "MISSISSIPPI", "TENNESSEE") ~ "Division 6",
    state %in% c("ARKANSAS", "LOUISIANA", "OKLAHOMA", "TEXAS") ~ "Division 7",
    state %in% c("ARIZONA", "COLORADO", "IDAHO", "MONTANA", "NEVADA", "NEW MEXICO", "UTAH", "WYOMING") ~ "Division 8",
    state %in% c("ALASKA", "CALIFORNIA", "HAWAII", "OREGON", "WASHINGTON") ~ "Division 9",
    TRUE ~ "ERROR"  # Default case if area_name doesn't match any category
  )
}

# Vectorizing the function to apply to a column of states
f1_not_county <- f1_not_county |>
  mutate(division = sapply(area_name, division))
f1_not_county
```

#### Developing Functions for Data Processing

In this step, we are creating functions, that perform the same data processing steps as above on a new dataset with similar schema. Firstly, reading `file_2` from the url provided.

```{r}
file_2 <- read_csv("https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv")
head(file_2)
```

Creating a function `function_for_step_1_2` to perform step 1 and 2 as above. Here columns are selected based on a pattern defined by `value_column_pattern`. The selected file is then transformed into a long format (`file_long`) using `pivot_longer()`, mapping columns to "Enrollment" and their corresponding values to "Value". The resultant data frame (`file_long`) is returned by the function. This will be the input for next function.

```{r}
function_for_step_1_2 <- function(infile, value_column_pattern = "D") {
  file_selected <- infile |>
    mutate(area_name = Area_name) |>
    select(area_name, STCOU, ends_with(value_column_pattern))
  
  file_long <- file_selected |>
    pivot_longer(
      cols = ends_with(value_column_pattern),
      names_to = "Enrollment",
      values_to = "Value"
    )
  
  return(file_long)
}

result1 <- function_for_step_1_2(file_2, value_column_pattern = "D")
result1 #Preview

```

The function `function_for_step_3` is currently transforming data by adding a `year` column derived from the `Enrollment` column. First, it converts `Enrollment` to a character type and extracts the year portion using `substr()`. Then, it conditions the `year` values: if greater than 24, it prefixes "19" to form a four-digit year; otherwise, it prefixes "200" to make it a four-digit year. Finally, it converts `year` back to numeric type. The formatted data frame (`file_formatted`) is returned by the function. After applying `function_for_step_3` to `result1`, the dataset is stored in `formatted_result` .

```{r}
function_for_step_3 <- function(indata) {
  file_formatted <- indata %>%
    mutate(year = as.numeric(substr(x = as.character(Enrollment), start = 8, stop = 9))) %>%
    mutate(year = if_else(condition = year > 24,
                          true = paste("19", as.character(year), sep = ""),
                          false = paste("200", as.character(year), sep = ""))) %>%
    mutate(year = as.numeric(year))
  
  return(file_formatted)
}
formatted_result <- function_for_step_3(result1)
formatted_result

```

The function `extract_state_from_area_name` can process class `county` data to derive a new `state` column. It achieves this by extracting a substring from the `area_name` column, specifically starting from two characters before the end (`nchar(area_name) - 1`) to the end (`nchar(area_name)`). Returns a new data frame which has the newly added `state` column .

```{r}
extract_state_from_area_name <- function(inputdata) {
  outputdt <- inputdata %>%
    mutate(state = substr(area_name, start = nchar(area_name) - 1, stop = nchar(area_name)))
  
  return(outputdt)
}
```

`assign_divisions` is a vectorized function which can assign the division to the class `state` data based on `area_name`.

```{r}
# Defines the main function to apply the division function to a data frame
assign_divisions <- function(indf) {
  outdf <- indf %>%
    mutate(division = sapply(area_name, division))
  
  return(outdf)
}
```

The function `function_for_steps4_5_6` can be used to perform steps 4 5 and 6.:

1.  It filters data into two separate data frames using the pattern ", \\w\\w" :

    -   `f_county`: Contains rows where `area_name` matches the pattern ", \\w\\w".
    -   `f_not_county`: Contains rows where `area_name` does not match the pattern.

2.  Custom classes are assigned to each filtered data frame:

    -   `f_county` is assigned the class "county".
    -   `f_not_county` is assigned the class "state".

3.  It then applies previously created functions for steps 5 and 6 to apply transforms separately :

    -   `f_county_with_state` is derived by applying `extract_state_from_area_name()` to `f_county`.
    -   `f_not_county_with_divisions` is derived by applying `assign_divisions()` to `f_not_county`.

4.  Finally, the function returns a list containing `f_county_with_state` and `f_not_county_with_divisions`.

```{r}
function_for_steps4_5_6 <- function(indata) {
  
  f_county <- indata[grep(pattern = ", \\w\\w", indata$area_name, invert = FALSE),]
  f_not_county <- indata[grep(pattern = ", \\w\\w", indata$area_name, invert = TRUE),]
  
    # Assign custom classes
  class(f_county) <- c("county", class(f_county))
  class(f_not_county) <- c("state", class(f_not_county))
  
  # Check the splits
  print("f_county:")
  print(head(f_county))
  print("f_not_county:")
  print(head(f_not_county))
  
  #use built in functions for steps 5 and 6
  f_county_with_state <- extract_state_from_area_name(f_county)
  f_not_county_with_divisions <- assign_divisions(f_not_county)
  
  return(list(f_county = f_county_with_state, 
              f_not_county = f_not_county_with_divisions))
}
```

Combining all functions together into a wrapper function on both csv files

```{r}
my_wrapper <- function(url, col_pattern){
  result <- read_csv(url) |>
    function_for_step_1_2(value_column_pattern = col_pattern) |>
    function_for_step_3() |>
    function_for_steps4_5_6()
  
  #return final result
  return(result)
}

#run wrapper
#csv b
res1 <- my_wrapper("https://www4.stat.ncsu.edu/~online/datasets/EDU01b.csv", col_pattern = "D")
res1

#csv a
res2 <- my_wrapper("https://www4.stat.ncsu.edu/~online/datasets/EDU01a.csv", col_pattern = "D")
res2
```

Creating a function with `bind_rows()` to combine files after applying the wrapper function.

```{r}
combine_results <- function(result1,result2){
  
  df1 <- bind_rows(result1$f_county,
                   result2$f_county)
  df2 <- bind_rows(result1$f_not_county,
                   result2$f_not_county)
  return(list(f_county=df1,f_not_county=df2))
}

final_results <- combine_results(res1,res2)
final_results[[1]] #County
final_results[[2]]#State
```

### Writing a Generic Function for Summarizing Data

#### Creating Plotting Functions

Creating a function that is assigned to class state . So by calling an object of class state within plot() function yields line plots of mean enrollment value of each division across years.

```{r}
plot.state <- function(df, var_name = "Value",statistic = "mean"){
  
  #Putting in an if else operator to return a message if the supplied variable is not in the df columns
  if (var_name %in% colnames(df)){
    columnname <- paste(var_name,statistic,sep = "_")
  
  #Extracting the summary statistic from the provided string
  func <- get(statistic)
  
  #Data Manipulations to obtain summary statistic
  summary_df  <- df |>
    select(var_name,division,year) |>
    filter(division != "ERROR" ) |>
    mutate(year = as.character(year)) |>
    group_by(year,division) |>
    summarise(columnname = func(get(var_name))) |>
    mutate(year= as.numeric(year))
  
  #Creating a line plot using the obtained summary df
  p <- ggplot(data = summary_df, aes(x = year,y = columnname)) +
    geom_line(aes(color=division)) +
    ylab(paste(var_name,statistic,sep = "_"))
  
  
  return(p)
  } else {
    "Variable not in the input dataset."
  }
  
}
```

```{r}
plot(final_results[[2]])
```

Creating a function that is assigned to class county . So by calling an object of class county within plot() function yields line plots of enrollment value of first n counties across years.

```{r}
plot.county <- function(df, State = "NC", Order = "Top",n = 5, var_name = "Value",statistic = "mean"){
  
  #Puting in an if else operator to return a message if the supplied variable is not in the df columns
  if (var_name %in% colnames(df) & State %in% df$state){
    columnname <- paste(var_name,statistic,sep = "_")
    #Extracting the summary statistic from the provided string
    func <- get(statistic)
    
    #Data Manipulations to obtain summary statistic
    summary_df <- df |>
    select(var_name, state, year, area_name) |>
    filter(state == State) |>
    group_by(area_name) |>
    summarise(columnname = func(get(var_name))) |>
    mutate(
      columnname_sorted = case_when(
        Order == "Top"    ~ desc(columnname),
        Order == "Bottom" ~ columnname,
        TRUE              ~ NA_real_  # Handle other cases if needed
      )
    ) |>
    arrange(columnname_sorted) |>
    select(-columnname_sorted)  
  
    #Getting a list of first n counties based on increasing/decreasing mean
    first_n_counties <- summary_df$area_name[1:n]
    
    #Subletting the original df to only yield the top/bottom n county data
    first_n_subset <- df |>
      filter(area_name %in% first_n_counties)
    
    #Creating a line plot from the Top/Bottom n subset
    p <- ggplot(data = first_n_subset,aes(x = year,y = Value))  +
      geom_line(aes(color = area_name))
    
    return(p)
  
  
  } else {
    "Variable not in the input dataset."
  }
  
}
```

```{r}
plot(final_results[[1]])
```

#### Custom Plot Function Implementation

Use the plot function on the county data frame with few more cases (plot with default values presented above):

- Once specifying the state to be "NC", the group being the top, the number looked at being 20

```{r}
plot(final_results[[1]],State = "NC", Order = "Top", n = 20)
```

- Once specifying the state to be "SC", the group being the bottom, the number looked at being 7

```{r}
plot(final_results[[1]], State = "SC", Order = "Bottom", n = 7)
```

- Once specifying the state to be "PA", the group being the top, the number looked at being 8

```{r}
plot(final_results[[1]], State = "PA", Order = "Top", n = 8)
```

## Final Implementation of Functions

Run data processing function on the four data sets at 4 additional URLs

```{r}
#run wrapper
res_a <- my_wrapper("https://www4.stat.ncsu.edu/~online/datasets/PST01a.csv", col_pattern = "D")

res_b <- my_wrapper("https://www4.stat.ncsu.edu/~online/datasets/PST01b.csv", col_pattern = "D")

res_c <- my_wrapper("https://www4.stat.ncsu.edu/~online/datasets/PST01c.csv", col_pattern = "D")

res_d <- my_wrapper("https://www4.stat.ncsu.edu/~online/datasets/PST01d.csv", col_pattern = "D")

```

Run data combining function to put these into one object

```{r}
final_results_1 <- combine_results(res_a,res_b)
final_results_2 <- combine_results(res_c,res_d)

f_results <- combine_results(final_results_1,final_results_2)
f_results[[1]]
f_results[[2]]
```

Use the plot function on the state data frame

```{r}
plot(f_results[[2]])
```

Plot function on the county data frame: 

- Once specifying the state to be "CA", the group being the top, the number looked at being 15

```{r}
plot(f_results[[1]], State = "CA", Order = "Top", n = 15 )
```

- Once specifying the state to be "TX", the group being the top, the number looked at being 4

```{r}
plot(f_results[[1]], State = "TX", Order = "Top", n = 4 )
```

- Once without specifying anything (defaults used)

```{r}
plot(f_results[[1]])
```

- Once specifying the state to be "NY", the group being the top, the number looked at being 10

```{r}
plot(f_results[[1]], State = "NY", Order = "Top", n = 10)
```
